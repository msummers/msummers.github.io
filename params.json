{
  "name": "Tech notes",
  "tagline": "",
  "body": "### Neo4j Browser configuration for Spring Boot with embedded Neo4j\r\nAdd these dependencies to `pom.xml`:\r\n```xml\r\n\t<dependency>\r\n\t\t<groupId>org.neo4j.app</groupId>\r\n\t\t<artifactId>neo4j-server</artifactId>\r\n\t\t<version>2.3.6</version>\r\n\t</dependency>\r\n\t<dependency>\r\n\t\t<groupId>org.neo4j.app</groupId>\r\n\t\t<artifactId>neo4j-server</artifactId>\r\n\t\t<version>2.3.6</version>\r\n\t\t<classifier>static-web</classifier>\r\n\t</dependency>\r\n```\r\nInvoke this method,\r\n```java\r\n\t@SuppressWarnings(\"deprecation\")\r\n\tpublic void neo4jBrowser() {\r\n\t\tEmbeddedDriver embeddedDriver = (EmbeddedDriver) Components.driver();\r\n\t\tGraphDatabaseService gdb = embeddedDriver.getGraphDatabaseService();\r\n\t\ttry {\r\n\t\t\tWrappingNeoServerBootstrapper neoServerBootstrapper;\r\n\t\t\tGraphDatabaseAPI api = (GraphDatabaseAPI) gdb;\r\n\r\n\t\t\tServerConfigurator config = new ServerConfigurator(api);\r\n\t\t\tconfig.configuration()\r\n\t\t\t\t.addProperty(Configurator.WEBSERVER_ADDRESS_PROPERTY_KEY, \"127.0.0.1\");\r\n\t\t\tconfig.configuration()\r\n\t\t\t\t.addProperty(Configurator.WEBSERVER_PORT_PROPERTY_KEY, \"8686\");\r\n\r\n\t\t\tneoServerBootstrapper = new WrappingNeoServerBootstrapper(api, config);\r\n\t\t\tneoServerBootstrapper.start();\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n```\r\n I do this from \r\n```java\r\n\t@EventListener\r\n\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\r\n\t\tneo4j.neo4jBrowser();\r\n```\r\nTags: #spring-boot #spring-data-neo4j\r\n\r\n_26-Aug-2016_\r\n\r\n### FTP Maven artifact to Sharefile\r\nTo ftp a Maven artifact to Sharefile use Wagon and the Wagon plugin:\r\n`pom.xml`\r\n```xml\r\n  <distributionManagement>\r\n    <repository>\r\n      <id>ftp-repository</id>\r\n      <url>ftp://newrelic.sharefileftp.com</url>\r\n    </repository>\r\n  </distributionManagement>\r\n\r\n  <build>\r\n    <extensions>\r\n      <extension>\r\n        <groupId>org.apache.maven.wagon</groupId>\r\n        <artifactId>wagon-ftp</artifactId>\r\n        <version>2.10</version>\r\n      </extension>\r\n    </extensions>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.codehaus.mojo</groupId>\r\n        <artifactId>wagon-maven-plugin</artifactId>\r\n        <version>1.0</version>\r\n        <executions>\r\n          <execution>\r\n            <id>upload-assembly</id>\r\n            <phase>install</phase>\r\n            <goals>\r\n              <goal>upload-single</goal>\r\n            </goals>\r\n            <configuration>\r\n              <serverId>sharefile-ftp</serverId>\r\n              <fromFile>${project.build.directory}/${project.build.finalName}.jar</fromFile>\r\n              <url>ftp://*organization*.sharefileftp.com/*full*path*to*subdirectory/</url>\r\n              <toDir>/</toDir>\r\n            </configuration>\r\n          </execution>\r\n        </executions>\r\n      </plugin>\r\n```\r\n`settings.xml`\r\n```xml\r\n<settings>\r\n\t<servers>\r\n\t\t<server>\r\n\t\t\t<id>sharefile-ftp</id>\r\n\t\t\t<username></username>\r\n\t\t\t<password></password>\r\n\t\t</server>\r\n\t</servers>\r\n</settings>\r\n```\r\n`mvn install` will then ftp the file to Sharefile.\r\n\r\nSharefile config information is found in your Sharefile account under `My Settings -> FTP Settings`.\r\n\r\n_11-Aug-2016_\r\n\r\n### POST Form data with Spring RestTemplate\r\nSimulates a browser Form submit (POST).\r\n```java\r\n      RestTemplate rest = new RestTemplate();\r\n      List<HttpMessageConverter<?>> converters = new ArrayList<>(2);\r\n      converters.add(new FormHttpMessageConverter());\r\n      converters.add(new StringHttpMessageConverter());\r\n      rest.setMessageConverters(converters);\r\n\r\n      // Form data goes into the map\r\n      MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();\r\n      map.add(\"firstName\", getFirstName());\r\n      map.add(\"lastName\", getLastName());\r\n      map.add(\"departureCity\", getCity().getId().toString());\r\n      Date departureDate = getDateAfter(new Date());\r\n      map.add(\"departureDate\", departureDate.toString());\r\n      map.add(\"arrivalCity\", getCity().getId().toString());\r\n      map.add(\"returnDate\", getDateAfter(departureDate).toString());\r\n\r\n      String result = rest.postForObject(\"http://localhost:8080/reserve\", map, String.class);\r\n```\r\n_18-Jul-2016_\r\n\r\n### Minimal standalone Spring Boot application\r\n```java\r\n@SpringBootApplication\r\npublic class AnApplication {\r\n\r\n   public static void main(String[] args) {\r\n      ConfigurableApplicationContext ctx = SpringApplication.run(AnApplication.class, args);\r\n      AnApplication main = ctx.getBean(AnApplication.class);\r\n      main.init();\r\n   }\r\n\r\n   private void init() {\r\n   }\r\n}\r\n```\r\n_15-Jul-2016_\r\n\r\n### Spring `@Value` default values\r\n```java\r\n@Value(${\"someProperty:<defaultValue>\"}\r\n```\r\n- If the config file _does not_ contain `someProperty` then this works as expected. \r\n- _If_ the config file _does_ contain `someProperty` _without_ a value `someProperty` is null.\r\n\r\n_15-Jul-2016_\r\n\r\n### Adding the New Relic Agent to a Spring Boot project\r\nAdd this to your `pom.xml`\r\n```xml\r\n<dependency>\r\n\t<groupId>com.newrelic.agent.java</groupId>\r\n\t<artifactId>newrelic-agent</artifactId>\r\n\t<version>${newrelic.agent.version}</version>\r\n</dependency>\r\n...\r\n<plugin>\r\n\t<groupId>org.apache.maven.plugins</groupId>\r\n\t<artifactId>maven-jar-plugin</artifactId>\r\n\t<configuration>\r\n\t\t<archive>\r\n\t\t\t<manifestEntries>\r\n\t\t\t\t<Premain-Class>com.newrelic.bootstrap.BootstrapAgent</Premain-Class>\r\n\t\t\t\t<Can-Redefine-Classes>true</Can-Redefine-Classes>\r\n\t\t\t\t<Can-Retransform-Classes>true</Can-Retransform-Classes>\r\n\t\t\t</manifestEntries>\r\n\t\t</archive>\r\n\t</configuration>\r\n</plugin>\r\n```\r\n- Ensure that all New Relic config files (`extension-example.xml extension.xsd newrelic.yml nrcerts`) are in `src/main/resources`\r\n- Execute the application from the command line with\r\n```shell\r\nmvn clean install spring-boot:run -Drun.jvmArguments=\"-javaagent:./target/<your-jar>.jar -Dnewrelic.config.file=./target/classes/newrelic.yml -Dnewrelic.config.app_name=<your-app-name>\"\r\n```\r\n_15-Jul-2016_\r\n\r\n[GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/)\r\n\r\n[Documentation](https://help.github.com/pages)\r\n\r\n[Support](https://github.com/contact)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
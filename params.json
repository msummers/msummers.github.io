{
  "name": "Tech notes",
  "tagline": "",
  "body": "### POST Form data with Spring RestTemplate\r\nSimulates a browser Form submit (POST).\r\n```java\r\n      RestTemplate rest = new RestTemplate();\r\n      List<HttpMessageConverter<?>> converters = new ArrayList<>(2);\r\n      converters.add(new FormHttpMessageConverter());\r\n      converters.add(new StringHttpMessageConverter());\r\n      rest.setMessageConverters(converters);\r\n\r\n      // Form data goes into the map\r\n      MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();\r\n      map.add(\"firstName\", getFirstName());\r\n      map.add(\"lastName\", getLastName());\r\n      map.add(\"departureCity\", getCity().getId().toString());\r\n      Date departureDate = getDateAfter(new Date());\r\n      map.add(\"departureDate\", departureDate.toString());\r\n      map.add(\"arrivalCity\", getCity().getId().toString());\r\n      map.add(\"returnDate\", getDateAfter(departureDate).toString());\r\n\r\n      String result = rest.postForObject(\"http://localhost:8080/reserve\", map, String.class);\r\n```\r\n_18-Jul-2016_\r\n\r\n### Minimal standalone Spring Boot application\r\n```java\r\n@SpringBootApplication\r\npublic class AnApplication {\r\n\r\n   public static void main(String[] args) {\r\n      ConfigurableApplicationContext ctx = SpringApplication.run(AnApplication.class, args);\r\n      AnApplication main = ctx.getBean(AnApplication.class);\r\n      main.init();\r\n   }\r\n\r\n   private void init() {\r\n   }\r\n}\r\n```\r\n_15-Jul-2016_\r\n\r\n### Spring `@Value` default values\r\n```java\r\n@Value(${\"someProperty:<defaultValue>\"}\r\n```\r\n- If the config file _does not_ contain `someProperty` then this works as expected. \r\n- _If_ the config file _does_ contain `someProperty` _without_ a value `someProperty` is null.\r\n\r\n_15-Jul-2016_\r\n\r\n### Adding the New Relic Agent to a Spring Boot project\r\nAdd this to your `pom.xml`\r\n```xml\r\n<dependency>\r\n\t<groupId>com.newrelic.agent.java</groupId>\r\n\t<artifactId>newrelic-agent</artifactId>\r\n\t<version>${newrelic.agent.version}</version>\r\n</dependency>\r\n...\r\n<plugin>\r\n\t<groupId>org.apache.maven.plugins</groupId>\r\n\t<artifactId>maven-jar-plugin</artifactId>\r\n\t<configuration>\r\n\t\t<archive>\r\n\t\t\t<manifestEntries>\r\n\t\t\t\t<Premain-Class>com.newrelic.bootstrap.BootstrapAgent</Premain-Class>\r\n\t\t\t\t<Can-Redefine-Classes>true</Can-Redefine-Classes>\r\n\t\t\t\t<Can-Retransform-Classes>true</Can-Retransform-Classes>\r\n\t\t\t</manifestEntries>\r\n\t\t</archive>\r\n\t</configuration>\r\n</plugin>\r\n```\r\n- Ensure that all New Relic config files (`extension-example.xml extension.xsd newrelic.yml nrcerts`) are in `src/main/resources`\r\n- Execute the application from the command line with\r\n```shell\r\nmvn clean install spring-boot:run -Drun.jvmArguments=\"-javaagent:./target/<your-jar>.jar -Dnewrelic.config.file=./target/classes/newrelic.yml -Dnewrelic.config.app_name=<your-app-name>\"\r\n```\r\n_15-Jul-2016_\r\n\r\n[GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/)\r\n\r\n[Documentation](https://help.github.com/pages)\r\n\r\n[Support](https://github.com/contact)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}